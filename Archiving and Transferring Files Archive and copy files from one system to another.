• The tar command can list the contents of archives or extract their files to the current system.

tar command options are divided into operations
-c, --create Create a new archive.
-x, --extract Extract from an existing archive.
-v, --verbose Verbose. Shows which files get archived or extracted.
-f, --file=File name. This option must be followed by the file name of the archive to use or create.
-p, --preserve-permissions Preserve the permissions of files and directories when extracting an archive, without subtracting the umask.


1) To create the tar archive named, /root/etc.tar, with the /etc directory as content as user root:
     ==> tar -cf /root/etc.tar /etc

2) To restore files from the /root/etc.tar archive to the /root/etcbackup directory:
     ==> tar -tf /root/etc.tar

 
• The tar command supports three compression methods. There are three different compression methods supported by the tar command.
-z, --gzip Use gzip compression (.tar.gz).
-j, --bzip2 Use bzip2 compression (.tar.bz2). bzip2 typically achieves a better compression ratio than gzip.
-J, --xz Use xz compression (.tar.xz). The xz compression typically achieves a better compression ratio than bzip2.

3) To create a gzip compressed archive named /root/etcbackup.tar.gz, with the contents from the /etc directory on host:
   ==>  tar -czf /root/etcbackup.tar.gz /etc

4) To create a bzip2 compressed archive named /root/logbackup.tar.bz2, with the contents from the /var/log directory on host:
  ==> tar -cjf /root/logbackup.tar.bz2 /var/log

5) To extract the contents of a gzip compressed archive named /root/etcbackup.tar.gz in the /tmp/etcbackup directory:

    ==>  tar -xjf /root/logbackup.tar.bz2


• TRANSFERRING FILES USING THE SECURE FILE TRANSFER PROGRAM

 To interactively upload or download files from a SSH server, use the Secure File Transfer Program, sftp
         : The  ==> put   command uploads a file to the remote system. The ==> get  command downloads a file from the remote system. 
           The  ==> exit command exits the sftp session.

   sftp> put /etc/hosts
   sftp> get /etc/yum.conf

• TRANSFERRING FILES USING SECURE COPY
OpenSSH is useful for securely running shell commands on remote systems. The Secure Copy command, 
scp, which is part of the OpenSSH suite, copies files from a remote system to the local system or from the local system to a remote system

6) The following example demonstrates how to copy the local /etc/yum.conf and /etc/hosts files on host, to the remoteuser's home directory on the remotehost remote system:
    ==> scp /etc/yum.conf /etc/hosts remoteuser@remotehost:/home/remoteuser

7) You can also copy a file in the other direction, from a remote system to the local file system. In this example, 
the file /etc/hostname on remotehost is copyed to the local directory /home/user. The scp command authenticates to remotehost as the user remoteuser.
  
   ==> scp remoteuser@remotehost:/etc/hostname /home/user

8) To copy a whole directory tree recursively, use the -r option. 

  ==> scp -r root@remoteuser:/var/log /tmp


• SYNCHRONIZE FILES AND DIRECTORIES WITH rsync

9) A trailing slash at the end of the source directory synchronizes the content of a directory without newly creating the subdirectory in the target directory. In this example
, the log directory is not created in the /tmp directory. Only the content of the /var/log/ directory is synchronized into the /tmp directory.
    ===> rsync -av /var/log/ /tmp

10) In this example, synchronize the local /var/log directory to the /tmp directory on the remotehost system:
   ==>  rsync -av /var/log remotehost:/tmp



SUMMARY:


• The tar command creates an archive file from a set of files and directories, extracts files from the archive, and lists the contents of an archive.
• The tar command provides a set of different compression methods reduce archive size.
• Besides providing a secure remote shell, the SSH service also provides the scp and sftp
commands as secure ways to transfer files from and to a remote system running the SSH server.
• The rsync command securely and efficiently synchronizes files between two directories, either
one of which can be on a remote system.




